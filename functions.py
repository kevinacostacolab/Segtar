# -*- coding: utf-8 -*-
"""Functions.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1f4kFt7Bs9hYQKIFLBtjWOessX18pOntg
"""

# -*- coding: utf-8 -*-


import csv
from google.colab import files


# Extraigo el valor de una cadena de texto segun delimitaciones y ocurrencias

def extraer_por_ocurrencia(cadena, inicio_delim, fin_delim, ocurrencia):

    try:

        # Inicializar índices y contador

        inicio = -1

        for _ in range(ocurrencia):

            inicio = cadena.index(inicio_delim, inicio + 1)

            fin = cadena.index(fin_delim, inicio + len(inicio_delim))

        return cadena[inicio + len(inicio_delim):fin]

    except ValueError:

        return -1  # Devuelvo -1 si no encuentra suficientes ocurrencias



#Retorna lista de valores de un csv desde la primer columna

def cargar_cuentas_csv(archivo):

    cuentas = []

    with open(archivo, mode='r', encoding='utf-8') as file:

        lector = csv.reader(file)

        next(lector)  # Saltar la cabecera si existe

        for fila in lector:

            if fila:  # Evitar filas vacías

                cuentas.append(fila[0])  # Primera columna (número de cuenta)

    return cuentas


#retorna true o false si un valor se encuentra en una lista

def verificar_valor(lista_valores, valor):

    return valor in lista_valores


#Crea un csv en base a una lista de datos

def creacion_csv(nombre_archivo,lista_datos):

    # Guardar los datos en un archivo CSV

    with open(nombre_archivo + '.csv', mode='w', newline='', encoding='utf-8') as archivo:

        escritor = csv.writer(archivo)

        # Escribir todas las filas en el archivo
        for dato in lista_datos:
          escritor.writerow([dato])

def creacion_txt(nombre_archivo,lista_datos):

  with open(nombre_archivo + '.txt', 'w', newline='', encoding='utf-8') as archivo:
   
    #escritor = csv.writer(archivo)

    # Escribir todas las filas en el archivo
    for dato in lista_datos:
      archivo.write(dato)


def reemplazar_dato(cadena, inicio_delim, fin_delim, ocurrencia, valor_reemplazar):

    try:
      # Inicializar índices y contador
      inicio = -1

      for _ in range(ocurrencia):

          inicio = cadena.index(inicio_delim, inicio + 1)
          fin = cadena.index(fin_delim, inicio + len(inicio_delim))
      
      return cadena[0:inicio+1] + valor_reemplazar + cadena[fin:len(cadena)]

    except ValueError:

        return -1  # Devuelvo -1 si no encuentra suficientes ocurrencias

